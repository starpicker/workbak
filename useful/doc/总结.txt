1.需求分析很重要好的需求分析可以减少无用工作，并且可以作为后续工作的凭据需求分析应保证可行性，易行性，需要通盘考虑问题尤其不能脑袋一热就保证什么，没有什么是可以保证的尤其在客户需求不断变化的情况下，要坚持开始的需求范围有些需求不是简单的添加代码，它导致的后续问题不是简单的修改就可以完成的在hitachi项目中，一些需求是后续不断添加的，这当然和oem性质有关系不过如果一开始能明确客户大致的方向，应该可以为这些需求留有code的位置，当然，没有完美的需求，都是不断的进化要做到的是尽量的预测未来变化，留有结构上的变动空间对于一些对结构改动很大的需求，要三思而为，添加功能容易造成的后果却是很大的，不可不查hitachi getlastframe这个feature定义有问题，导致大部分时间都在它上面另外moderator presenter的需求很混乱，不是及时处理render_hitachi的代码，根本无法处理这么多复杂的逻辑需求分析，包括了可行性，必须要认真考虑2.框架结构要优先于接口没有好的系统，只能到处补漏洞，越补越多对于不合理的结构，提早修改对于项目刚建，需要认真思考框架，给需求里面的各个需求及未来可能的变化留有框架里的位置尽量做到交互少，结构清晰，单一，易读是最重要的里面提早注意性能问题，对关键路径代码认真思考，不能马虎结构不是简单想想，需要有通盘的考虑，结构好了，接口才好定，才能灵活的预留功能和接口设计模式可以用些，不能太复杂3.详细设计应该比coding更重要详细设计其实就是coding的翻译这里面设计api，考虑功能模块，交互关系提供基础库处理，封装好无交互功能模块认真揣摩各个核心模块，尤其是后期基本不变的模块要仔细设计testbed可以用于核心模块要在心里有个想法：工程师不是码农，最后一步才是coding详细设计有类图，需和具体coder讨论一下吧，那就是自己了4.编码的风格及基本保证编码风格必须统一，我坚持自己的风格，糅合了goolge 规范但是省去if while后面的空格大括号也单起一行，return前必须空行*放在类型后，不容许单行声明多个变量少用auto，不容许magic number多用const，少用define少用技巧，多用平淡的代码老老实实编码，认认真真注释这个阶段很长，注意review code，刚写的代码review很好测试要保证，注意效率的问题如果模块分有每个程序员，希望接口风格能统一自己不喜欢检查输入的函数参数，但是相应的代码也要在包括benchmark和log也要加入宏的控制中5.自测和qa的测试加强交流可以减少无谓的effort每个过程都有和别人交流，和老大交流可以规避自己眼光看不到的地方早期的修改很重要，项目的最后才发现一个根本无法解决的问题，简直了认真想想自己的solution是否有无法解决的case，到最后的patch简直要了命了好的项目需要通力的协作，个人能力有限谈谈一些有用的：1.风格的统一再次提出来hitachi要求优化内存优化，dmr这边基本没有可优化的地方stack需要优化，还好基本都是用平台库的，直接替换的，就知道哪些地方在频繁调用2.内存池和线程池用起来，没坏处3.对象的生命周期需要明确，尤其是传出去做事情的对象download和timer就因为这些而重启时crash一些问题不容易重现，而改动却很简单，需要coding时好好思考未来会发生什么4.多用std标准，优化代码用看kfifo就省了很多的问题要有预见问题的能力，大胆的尝试5.error的处理不可忽视，这是一个工程师系统眼光的表现