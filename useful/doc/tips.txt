1. 项目初期要想好整体结构尤其时一些数据可能要被多处处理要避免主要数据被很多地方读写到后期要加锁，明显会影响性能2. 关键区代码需要重点关注前期不在意的，觉得不会同步访问的地方，后期都可能导致同步访问，导致很多问题3. hitachi项目和之前oem项目不一样的地方，它可以反复重启，这就需要认真定义对象的生命周期实际上，目前调整了好几次对象的生命周期，都不理想因为对象的牵扯太多，有回调，有其它的对象4. smarter pointer可以用，但是必须给个reset的地方，明确生命周期5. 返回值check，在代码关键路径上还是必须的，可以crash，但是得标定出来6. 内存越界更加难查，代码关键路径上尽量做到尽善尽美std的exception还是需要的，为了后期尽快定位问题7. 